
import edu.princeton.cs.algs4.*;

public class Dss {
    private double[] distTo; 
    private DirectedEdge[] edgeTo;
    private IndexMinPQ<Double> pq;
    private int source, sink;

    public Dss(EdgeWeightedDigraph G, int src, int snk) {
        source = src;
        sink = snk;
        distTo = new double[G.V()];
        edgeTo = new DirectedEdge[G.V()];
        pq = new IndexMinPQ<Double>(G.V());


        for (int v = 0; v < G.V(); v++) {
            distTo[v] = Double.POSITIVE_INFINITY;
        }


        distTo[source] = 0.0;
        pq.insert(source, 0.0);


        while (!pq.isEmpty() && pq.minIndex() != sink) {
            int v = pq.delMin();


            for (DirectedEdge e : G.adj(v)) {
                int w = e.to();
                if (distTo[w] > distTo[v] + e.weight()) {
                    distTo[w] = distTo[v] + e.weight();
                    edgeTo[w] = e;
                    if (pq.contains(w)) {
                        pq.decreaseKey(w, distTo[w]);
                    } else {
                        pq.insert(w, distTo[w]);
                    }
                }
            }
        }
    }
    public double distToSink() {
        return distTo[sink];
    }
}
